#######################################################
# 
# NetworkFacade.py
# Python implementation of the Class NetworkFacade
# Generated by Enterprise Architect
# Created on:      28-Dec-2022 10:14:17 AM
# Original author: Giu Platania
# 
#######################################################


class NetworkFacade(Facade):
    """Facade class for the Component component. Responsible for handling all public
    routing. Forwards all requests to the internal router.
    """
    def __init__(self):
        self.scanner = NetworkGeneralController()
        self.tcp_ssl_socket = NetworkGeneralController()
        self.server = NetworkGeneralController()
        self.connection_status = NetworkGeneralController()
        self.network_controller = NetworkGeneralController()

    def scan_for_available_networks(self):
        return self.scanner.scan()

    def open_tcp_ssl_socket(self, host, port):
        return self.tcp_ssl_socket.open(host, port)

    def listen_for_incoming_connections(self):
        return self.server.listen()

    def get_connection_status(self):
        return self.connection_status.check_status()

    def connect(self):
        return self.network_controller.connect()
    
    def disconnect(self):
        return self.network_controller.disconnect()
    
    def send_data(self, data):
        return self.network_controller.send_data(data)
    
    def receive_data(self):
        return self.network_controller.receive_data()
    
    def get_connection_status(self):
        return self.network_controller.get_connection_status()
    
    def get_network_information(self):
        return self.network_controller.get_network_information()
    
    def configure_network_settings(self, settings):
        return self.network_controller.configure_network_settings(settings)
    
    def scan_for_available_networks(self):
        return self.network_controller.scan_for_available_networks()
    
    def connect_to_specific_network(self, network_name):
        return self.network_controller.connect_to_specific_network(network_name)
