#######################################################
#
# core_name_controller.py
# Python implementation of the Class CoreNameRulesController
# Generated by Enterprise Architect
# Created on:      16-Dec-2022 10:56:02 AM
# Original author: Giu Platania
#
#######################################################


from typing import TYPE_CHECKING, Dict

from digitalpy.core.main.singleton_configuration_factory import (
    SingletonConfigurationFactory,
)
from digitalpy.core.service_management.domain.service_description import (
    ServiceDescription,
)
from digitalpy.core.telemetry.domain.status_factory import StatusFactory
from digitalpy.core.telemetry.domain.service_status import ServiceStatus
from digitalpy.core.service_management.domain.service import Service
from digitalpy.core.main.object_factory import ObjectFactory
from digitalpy.core.service_management.digitalpy_service import DigitalPyService
from digitalpy.core.service_management.domain import service_status
from digitalpy.core.service_management.controllers.service_management_process_controller import (
    ServiceManagementProcessController,
)
from digitalpy.core.main.controller import Controller

# import builders

if TYPE_CHECKING:
    from digitalpy.core.digipy_configuration.domain.model.configuration import (
        Configuration,
    )
    from digitalpy.core.zmanager.impl.default_action_mapper import DefaultActionMapper
    from digitalpy.core.zmanager.request import Request
    from digitalpy.core.zmanager.response import Response
    from digitalpy.core.domain.domain.network_client import NetworkClient
    from digitalpy.core.component_management.domain.model.component import Component
    from digitalpy.core.digipy_configuration.domain.model.actionkey import ActionKey
    from digitalpy.core.component_management.domain.model.error import Error


class ServiceManagementController(Controller):
    """This class is used to manage the services."""

    def __init__(
        self,
        request: "Request",
        response: "Response",
        sync_action_mapper: "DefaultActionMapper",
        configuration: "Configuration",
    ):
        super().__init__(request, response, sync_action_mapper, configuration)
        self.service_management_process_controller = ServiceManagementProcessController(
            request,
            response,
            sync_action_mapper,
            configuration,
        )
        self._services: Dict[str, DigitalPyService] = {}

    def initialize(self, request: "Request", response: "Response"):
        """This function is used to initialize the controller."""
        super().initialize(request, response)
        self.service_management_process_controller.initialize(request, response)

    def initialize_service(self, service_id: str, *args, **kwargs):
        """This function is used to initialize the service. It first retrieves the service status 
        from the status factory. Based on the status, it either starts the service or does nothing.
        Finally, it adds the service to the service index.

        Args:
            service_id: The ID of the service to initialize
        """
        service_configuration: Service = (
            SingletonConfigurationFactory.get_configuration_object(service_id)
        )
        # initialize the service based on the service_id
        service = ObjectFactory.get_instance(
            service_id, {"service": service_configuration}
        )
        self._services[service_id] = service
        match service_configuration.status:
            case service_status.RUNNING:
                self.start_service(service_id)
            case _:
                pass

    def start_service(self, service_id: str, *args, **kwargs):
        """This function is used to start the service."""
        service = self._services[service_id]
        self.service_management_process_controller.start_process(service)

    def stop_service(self, service_id: str, *args, **kwargs):
        """This function is used to stop the service."""
        service = self._services[service_id]
        self.service_management_process_controller.stop_process(service)

    def restart_service(self, service_id: str, *args, **kwargs):
        """This function is used to restart the service."""
        self.stop_service(service_id)
        self.start_service(service_id)