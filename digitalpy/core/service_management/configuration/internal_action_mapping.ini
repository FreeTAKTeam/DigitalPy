[actionmapping]
ServiceManagement??Type = core.service_management.controllers.service_management_controller.ServiceManagementController.evaluate_request

??BroadcastServiceManagement = core.service_management.controllers.service_management_sender_controller.ServiceManagementSenderController.broadcast_service_management

??ParseServiceManagement = core.service_management.controllers.service_management_controller.ServiceManagementController.parse_service_management

??SerializeServiceManagement = core.service_management.controllers.service_management_general_controller.ServiceManagementGeneralController.serialize_service_management

;protectedstart Business Model::FTS Catalogs::Application::Component::DigitalPy Components::DigitalPy::DigPy Core::Service Management.actionMapping
;protectedend


[Request]
__class = digitalpy.routing.impl.default_request.DefaultRequest
;protectedstart Business Model::FTS Catalogs::Application::Component::DigitalPy Components::DigitalPy::DigPy Core::Service Management.request
;protectedend


[ActionMapper]
__class = digitalpy.routing.impl.default_action_mapper.DefaultActionMapper
;protectedstart Business Model::FTS Catalogs::Application::Component::DigitalPy Components::DigitalPy::DigPy Core::Service Management.ActionMapper
;protectedend


[event_manager]
__class = digitalpy.core.impl.default_event_manager.DefaultEventManager
;protectedstart Business Model::FTS Catalogs::Application::Component::DigitalPy Components::DigitalPy::DigPy Core::Service Management.request
;protectedend


[Response]
__class = digitalpy.routing.impl.default_response.DefaultResponse
;protectedstart Business Model::FTS Catalogs::Application::Component::DigitalPy Components::DigitalPy::DigPy Core::Service Management.Response
;protectedend

