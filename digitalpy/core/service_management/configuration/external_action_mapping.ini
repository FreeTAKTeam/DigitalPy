[actionmapping]
; this action is responsible for building a topic
; based on a number 
; Request 
;  action: Connection
;  context: Repeater
;  values:
;    recipients (Union[List[str], str]): a list of recipients id'sa list of recipients id's or a * representing that the message should be sent to all connected clients
; Response values:
;  next action: publish
;  context: repeater
;  values:
;    message (List[Node]): a list of node objects representing repeated messages
??publish = digitalpy.core.service_management.service_management_facade.ServiceManagement.execute

??start_service = digitalpy.core.service_management.service_management_facade.ServiceManagement.start_service

??stop_service = digitalpy.core.service_management.service_management_facade.ServiceManagement.stop_service

??reload_system_health = digitalpy.core.service_management.service_management_facade.ServiceManagement.reload_system_health

??get_service_status = digitalpy.core.service_management.service_management_facade.ServiceManagement.get_service_status

??get_service_topics = digitalpy.core.service_management.service_management_facade.ServiceManagement.get_service_topics

??put_service_topic = digitalpy.core.service_management.service_management_facade.ServiceManagement.put_service_topic

??delete_service_topic = digitalpy.core.service_management.service_management_facade.ServiceManagement.delete_service_topic