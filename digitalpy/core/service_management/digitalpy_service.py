#######################################################
# 
# DigitalPyService.py
# Python implementation of the Class DigitalPyService
# Generated by Enterprise Architect
# Created on:      02-Dec-2022 5:39:44 PM
# Original author: Giu Platania
# 
#######################################################
from digitalpy.core.zmanager.service import Service
from digitalpy.core.zmanager.impl.zmq_subscriber import ZmqSubscriber
from digitalpy.core.zmanager.impl.zmq_pusher import ZMQPusher
from digitalpy.core.parsing.formatter import Formatter

class DigitalPyService(Service, ZmqSubscriber, ZMQPusher):
    # on the reception of messages from the subscriber interface or the socket
    #TODO: what is the service manager supposed to do? is this going to be a new service
    
    def __init__(self, service_id: str, subject_address: str, subject_port: int, subject_protocol: str, integration_manager_address: str, integration_manager_port: int, integration_manager_protocol: str, formatter: Formatter):
        """the constructor for the digitalpy service class

        Args:
            service_id (str): the unique id of the service inheriting from DigitalpyService
            subject_address (str): the address of the zmanager "subject"
            subject_port (int): the port of the zmanager "subject"
            subject_protocol (str): the protocol of the zmanager "subject"
            integration_manager_address (str): the address of the zmanager "integration_manager"
            integration_manager_port (int): the port of the zmanager "integration_manager"
            integration_manager_protocol (str): the protocol of the zmanager "integration_manager"
            formatter (Formatter): the formatter used by the service to serialize the request values to and from messages, (should be injected by object factory)
        """
        Service.__init__(self)
        ZmqSubscriber.__init__(self, formatter)
        ZMQPusher.__init__(self, formatter)
        self.subject_address = subject_address
        self.subject_port = subject_port
        self.subject_protocol = subject_protocol
        self.integration_manager_address = integration_manager_address
        self.integration_manager_port = integration_manager_port
        self.integration_manager_protocol = integration_manager_protocol
        self.service_id = service_id

    def discovery(self):
        """used to  inform the discoverer of the specifics of this service"""
        # TODO: the contract for discovery needs to be established
        # example for potential implementation
        return "service desc"

    def send_heart_beat(self):
        """used to inform the service menager that this service is still alive"""
        # TODO: once the service manager has been well defined then we will need
        # to define the format for this service.

    def initialize_connections(self, application_protocol: str):
        """initialize connections to the subject and the integration manager

        Args:
            application_protocol (str): the application protocol of the service
        """
        ZMQPusher.initiate_connections(self, self.subject_port, self.subject_address, self.service_id)
        self.broker_connect(self.integration_manager_address, self.integration_manager_port, self.integration_manager_protocol, self.service_id, application_protocol)

    def __getstate__(self):
        ZmqSubscriber.__getstate__(self)
        ZMQPusher.__getstate__(self)
        return self.__dict__
    
    def __setstate__(self, state):
        ZmqSubscriber.__setstate__(self, state)
        ZMQPusher.__setstate__(self, self.__dict__)