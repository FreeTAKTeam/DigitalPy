#######################################################
# 
# DigitalPyService.py
# Python implementation of the Class DigitalPyService
# Generated by Enterprise Architect
# Created on:      02-Dec-2022 5:39:44 PM
# Original author: Giu Platania
# 
#######################################################
from digitalpy.core.service import Service
from digitalpy.routing.impl.zmq_subscriber import ZmqSubscriber
from digitalpy.routing.impl.zeroless_pusher import ZerolessPusher

class DigitalPyService(Service, ZmqSubscriber, ZerolessPusher):
    # on the reception of messages from the subscriber interface or the socket
    #TODO: what is the service manager supposed to do? is this going to be a new service
    
    def __init__(self, service_id: str, subject_address: str, subject_port: int, integration_manager_address: str, integration_manager_port: int):
        self.subject_address = subject_address
        self.subject_port = subject_port
        self.integration_manager_address = integration_manager_address
        self.integration_port_address = integration_manager_port
        self.service_id = service_id
        
    def discovery(self):
        """report the service to a service manager
        """
        # TODO: the contract for discovery needs to be established
        
    def send_heart_beat(self):
        """send service is alive
        """
        # TODO: the functionality and protocol for sending heartbeats needs to be established
        self.subject_send(self.service_id+"here")
    
    def initialize_connections(self):
        self.subject_bind(self.subject_address, self.subject_port)
        self.broker_connect(self.integration_port_address, self.integration_manager_address,self.service_id)