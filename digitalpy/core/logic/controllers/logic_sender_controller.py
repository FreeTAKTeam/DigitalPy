#######################################################
# 
# core_name_controller.py
# Python implementation of the Class logic
# Generated by Enterprise Architect
# Created on:      16-Dec-2022 10:56:02 AM
# Original author: Giu Platania
# 
#######################################################
from digitalpy.core.digipy_configuration.configuration import Configuration
from digitalpy.core.main.controller import Controller
from digitalpy.core.zmanager.action_mapper import ActionMapper
from digitalpy.core.zmanager.request import Request
from digitalpy.core.zmanager.response import Response

class LogicSenderController(Controller):
    """contains all the business logic of this core package
    """

    def __init__(self, request: Request, response: Response, action_mapper: ActionMapper, configuration: Configuration):
        """the constructor of the Logic Sender Controller class

        Args:
            request (Request): the request object to be passed to the base class. Not used currently
            response (Response): the response object to be passed to the base class. Not used currently
            action_mapper (ActionMapper): the action_mapper object to be used for sub_requests passed to the base class. Not used currently
            configuration (Configuration): the configuration object passed to the base class. Not used currently
        """
        super().__init__(request=request, response=response, action_mapper=action_mapper, configuration=configuration)

    def broadcast_logic(self, event: object):
        """the core broadcasting logic of the component

        Args:
            event (object): the event to be broadcasted
        """

    def execute(self, method: str = None):
        """the base execution method of the component

        Args:
            method (str, optional): the name of the method. Defaults to None.
        """
