#######################################################
#
# IAMFacade.py
# Python implementation of the Class IAMFacade
# Generated by Enterprise Architect
# Created on:      27-Dec-2022 9:33:15 AM
# Original author: Giu Platania
# example of simplified component with no routing class
#######################################################

import traceback
from typing import TYPE_CHECKING
from digitalpy.core.IAM.controllers.iam_filter_controller import IAMFilterController
from digitalpy.core.IAM.controllers.iam_persistence_controller import (
    IAMPersistenceController,
)

from digitalpy.core.component_management.impl.default_facade import DefaultFacade
from digitalpy.core.zmanager.request import Request
from digitalpy.core.zmanager.response import Response

from .controllers.iam_users_controller import IAMUsersController
from .configuration.iam_constants import (
    ACTION_MAPPING_PATH,
    LOGGING_CONFIGURATION_PATH,
    INTERNAL_ACTION_MAPPING_PATH,
    MANIFEST_PATH,
    CONFIGURATION_PATH_TEMPLATE,
    LOG_FILE_PATH,
    COMPONENT_NAME,
)
from . import base

if TYPE_CHECKING:
    from digitalpy.core.IAM.IAM_recipient_filter_strategy import (
        IAMRecipientFilterStrategy,
    )
    from digitalpy.core.IAM.IAM_action_filter_strategy import IAMActionFilterStrategy


class IAM(DefaultFacade):
    """the IAM facade provides the single point of entry to all the Autentication and
    authorization functions
    """

    def __init__(
        self,
        iam_action_mapper,
        request,
        response,
        configuration,
        iam_recipient_filter_strategy: "IAMRecipientFilterStrategy" = None,
        iam_action_filter_strategy: "IAMActionFilterStrategy" = None,
        log_file_path: str = LOG_FILE_PATH,
    ):
        super().__init__(
            # the path to the external action mapping
            action_mapping_path=ACTION_MAPPING_PATH,
            # the path to the internal action mapping
            internal_action_mapping_path=INTERNAL_ACTION_MAPPING_PATH,
            # the path to the logger configuration
            logger_configuration=LOGGING_CONFIGURATION_PATH,
            # the package containing the base classes
            base=base,
            # the component specific action mapper (passed by constructor)
            action_mapper=iam_action_mapper,
            # the request object (passed by constructor)
            request=request,
            # the response object (passed by constructor)
            response=response,
            # the configuration object (passed by constructor)
            configuration=configuration,
            # the template for the absolute path to the model object definitions
            configuration_path_template=CONFIGURATION_PATH_TEMPLATE,
            # the path to the manifest file
            manifest_path=MANIFEST_PATH,
            # the path for log files to be stored
            log_file_path=log_file_path,
        )
        # self.persistency_controller = IAMController()
        self.persistency_controller = IAMPersistenceController(
            request, response, iam_action_mapper, configuration
        )
        self.users_controller = IAMUsersController(
            request=request,
            response=response,
            action_mapper=iam_action_mapper,
            configuration=configuration,
        )
        self.filter_controller = IAMFilterController(
            request=request,
            response=response,
            sync_action_mapper=iam_action_mapper,
            configuration=configuration,
            iam_recipient_filter_strategy=iam_recipient_filter_strategy,
            iam_action_filter_strategy=iam_action_filter_strategy,
        )
        # self.persistency_controller = IAMController()
        # self.persistency_controller = IAMController()
        self.functions = {}
        self.groups = {}
        self.group_permissions = {}
        self.system_users = {}

    def initialize(self, request: Request, response: Response):
        self.request = request
        self.response = response
        # self.persistency_controller.initialize(request, response)
        self.persistency_controller.initialize(request, response)
        self.users_controller.initialize(request, response)
        self.filter_controller.initialize(request, response)
        self.persistency_controller.initialize(request, response)
        # self.persistency_controller.initialize(request, response)
        # self.persistency_controller.initialize(request, response)

    def setup(self, *args, **kwargs):
        super().setup(*args, **kwargs)
        self.persistency_controller.intialize_db()
        self.persistency_controller.clear_sessions()
        self.persistency_controller.create_default_permissions()
        self.persistency_controller.create_default_groups()
        self.persistency_controller.create_admin_system_user()
        self.persistency_controller.create_anonymous_system_user()
        self.persistency_controller.ses.expunge_all()

    def execute(self, method):
        self.request.set_value("logger", self.logger)
        self.request.set_value("config_loader", self.config_loader)
        self.request.set_value("tracer", self.tracer)
        try:
            if hasattr(self, method):
                getattr(self, method)(**self.request.get_values())
            else:
                response = self.execute_sub_action(self.request.get_action())
                self.response.set_values(response.get_values())
        except Exception as e:
            self.logger.fatal(str(e))
            self.logger.debug(traceback.format_exc())

    def get_all_functions(self, **kwargs):
        return self.persistency_controller.get_all_functions()

    def get_function_by_id(self, function_id, **kwargs):
        return self.persistency_controller.get_function_by_id(function_id)

    def create_function(self, function, **kwargs):
        return self.persistency_controller.create_function(function)

    def update_function(self, function_id, updated_function, **kwargs):
        return self.persistency_controller.update_function(
            function_id, updated_function
        )

    def delete_function(self, function_id, **kwargs):
        return self.persistency_controller.delete_function(function_id)

    def get_all_groups(self, **kwargs):
        return self.persistency_controller.get_all_groups()

    def get_group_by_id(self, group_id, **kwargs):
        return self.persistency_controller.get_group_by_id(group_id)

    def get_group_by_name(self, group_name, *args, **kwargs):
        return self.persistency_controller.get_group_by_name(group_name)

    def create_group(self, group, **kwargs):
        return self.persistency_controller.create_group(group)

    def update_group(self, group_id, updated_group, **kwargs):
        return self.persistency_controller.update_group(group_id, updated_group)

    def delete_group(self, group_id, **kwargs):
        return self.persistency_controller.delete_group(group_id)

    def get_all_group_permissions(self, **kwargs):
        return self.persistency_controller.get_all_group_permissions()

    def get_group_permissions_by_id(self, group_permissions_id, **kwargs):
        return self.persistency_controller.get_group_permissions_by_id(
            group_permissions_id
        )

    def update_group_permissions(
        self, group_permissions_id, updated_group_permissions, **kwargs
    ):
        return self.persistency_controller.update_group_permissions(
            group_permissions_id, updated_group_permissions
        )

    def delete_group_permissions(self, group_permissions_id, **kwargs):
        return self.persistency_controller.delete_group_permissions(
            group_permissions_id
        )

    def get_all_system_users(self, **kwargs):
        return self.persistency_controller.get_all_system_users()

    def get_system_user_by_id(self, system_user_id, **kwargs):
        return self.persistency_controller.get_system_user_by_id(system_user_id)

    def create_system_user(self, system_user, **kwargs):
        return self.persistency_controller.Createsystem_user(system_user)

    def add_function(self, function, **kwargs):
        self.functions[function.uid] = function

    def get_function(self, uid, **kwargs):
        return self.functions.get(uid)

    def get_user_by_cn(self, *args, **kwargs):
        return self.users_controller.get_user_by_cn(*args, **kwargs)

    def get_all_users(self, *args, **kwargs):
        return self.persistency_controller.get_all_users(*args, **kwargs)

    def get_connections_by_id(self, *args, **kwargs):
        self.users_controller.get_connections_by_id(*args, **kwargs)

    def get_all_connections(self, *args, **kwargs):
        self.users_controller.get_all_connections(*args, **kwargs)

    def get_session_by_uid(self, *args, **kwargs):
        self.users_controller.get_session_by_uid(*args, **kwargs)

    def ValidateUsers(self, **kwargs):
        self.persistency_controller.validate_users(**kwargs)

    def validate_request(self, *args, **kwargs):
        self.users_controller.validate_request(*args, **kwargs)

    def create_permission(self, *args, **kwargs):
        """a wrapper to call the persistence controller"""
        self.persistency_controller.create_permission(*args, **kwargs)

    def create_group_permission(self, *args, **kwargs):
        """a wrapper to call the persistence controller"""
        self.persistency_controller.create_group_permission(*args, **kwargs)

    def connection(self, *args, **kwargs):
        """a wrapper to call the users controller"""
        self.users_controller.connection(*args, **kwargs)

    def disconnection(self, *args, **kwargs):
        """a wrapper to call the users controller"""
        self.users_controller.disconnection(*args, **kwargs)

    def filter_recipients(self, *args, **kwargs):
        """filter recipients based on the request"""
        self.filter_controller.filter_recipients(*args, **kwargs)

    def filter_action(self, *args, **kwargs):
        """filter actions based on the request"""
        return self.filter_controller.filter_action(*args, **kwargs)

    def authenticate(self, *args, **kwargs):
        """authenticate the user"""
        self.users_controller.authenticate_system_user(*args, **kwargs)
