#######################################################
# 
# IAMFacade.py
# Python implementation of the Class IAMFacade
# Generated by Enterprise Architect
# Created on:      27-Dec-2022 9:33:15 AM
# Original author: Giu Platania
# example of simplified component with no routing class
#######################################################

from digitalpy.core.component_management.impl.default_facade import Facade

class IAMFacade(Facade):
    """the IAM facade provides the single point of entry to all the Autentication and
    authorization functions
    """
  def __init__(self):
    self.function_controller = IAMController()
    self.group_controller = IAMController()
    self.group_permissions_controller = IAMController()
    self.system_user_controller = IAMController()
	self.functions = {}
    self.groups = {}
    self.group_permissions = {}
    self.system_users = {}
    
  def get_all_functions(self):
    return self.function_controller.get_all_functions()
  
  def get_function_by_id(self, function_id):
    return self.function_controller.get_function_by_id(function_id)
  
  def create_function(self, function):
    return self.function_controller.create_function(function)
  
  def update_function(self, function_id, updated_function):
    return self.function_controller.update_function(function_id, updated_function)
  
  def delete_function(self, function_id):
    return self.function_controller.delete_function(function_id)
  
  def get_all_groups(self):
    return self.group_controller.get_all_groups()
  
  def get_group_by_id(self, group_id):
    return self.group_controller.get_group_by_id(group_id)
  
  def create_group(self, group):
    return self.group_controller.create_group(group)
  
  def update_group(self, group_id, updated_group):
    return self.group_controller.update_group(group_id, updated_group)
  
  def delete_group(self, group_id):
    return self.group_controller.delete_group(group_id)
  
  def get_all_group_permissions(self):
    return self.group_permissions_controller.get_all_group_permissions()
  
  def get_group_permissions_by_id(self, group_permissions_id):
    return self.group_permissions_controller.get_group_permissions_by_id(group_permissions_id)
  
  def create_group_permissions(self, group_permissions):
    return self.group_permissions_controller.create_group_permissions(group_permissions)
  
  def update_group_permissions(self, group_permissions_id, updated_group_permissions):
    return self.group_permissions_controller.update_group_permissions(group_permissions_id, updated_group_permissions)
  
  def delete_group_permissions(self, group_permissions_id):
    return self.group_permissions_controller.delete_group_permissions(group_permissions_id)
  
  def get_all_system_users(self):
    return self.system_user_controller.get_all_system_users()
  
  def get_system_user_by_id(self, system_user_id):
    return self.system_user_controller.get_system_user_by_id(system_user_id)
  
  def create_system_user
	  return self.system_user_controller.Createsystem_user(system_user)
  
  def add_function(self, function):
        self.functions[function.uid] = function

  def get_function(self, uid):
        return self.functions.get(uid)
	"""In Python, the **kwargs syntax is used to pass a keyworded, variable-length argument dictionary 
  to a function. It allows you to pass an arbitrary number of keyword arguments to a function.
  """
  def update_function(self, uid, **kwargs):
        function = self.functions.get(uid)
        if function is None:
            return
        function.update(**kwargs)

  def delete_function(self, uid):
        del self.functions[uid]