#######################################################
#
# core_name_general_controller.py
# Python implementation of the Class CoreNameGeneralController
# Generated by Enterprise Architect
# Created on:      16-Dec-2022 10:56:05 AM
# Original author: Giu Platania
#
#######################################################
from typing import List, Union
from digitalpy.core.domain.node import Node
from digitalpy.core.main.controller import Controller

from .xml_serialization_controller import XMLSerializationController
from ..configuration.serialization_constants import Protocols


# TODO convert this to use a business rules controller instead of a standard controller
class SerializationGeneralController(Controller):
    # default constructor  def __init__(self):

    def __init__(self, request, response, action_mapper, configuration):
        super().__init__(request, response, action_mapper, configuration)
        self.xml_serialization_controller = XMLSerializationController(
               request, response, action_mapper, configuration)

    def execute(self, method=None):
        getattr(self, method)(**self.request.get_values())
        return self.response

    def initialize(self, request, response):
        super().initialize(request, response)
        self.xml_serialization_controller.initialize(request, response)

    def serialize_node_to_protocol(self, message: Union[Node, List[Node]], protocol, **kwargs):
        """this is the general method used to serialize the component to a given format
        """
        messages = []
        if protocol.upper() == Protocols.XML:
            # handle case where message contains multiple messages
            if isinstance(message, list):
                for m in message:
                    messages.append(self.xml_serialization_controller.serialize_node(m))
            else:
                raise ValueError("unsupported type passed in message value only list type support")
        else:
            raise Exception("unsupported protocol "+protocol)

        self.response.set_value("message", messages)

    def deserialize(self):
        """Deserializes a byte stream into an object"""
        pass

    def serialize_to_file(self):
        """Serializes an object into a file"""
        pass

    def serialize(self):
        """Serializes an object into a byte stream"""
        pass

    def domain_to_xml_parsing(self):
        """convert Domain model to XML string"""
        pass

    def xml_to_domain_parsing(self):
        """convert XML string to Domain model"""
        pass

    def domain_to_json_parsing(self):
        """convert Domain model object to JSON string"""
        pass

    def domain_to_protobuf_parsing(self):
        """convert Domain model object to protobuf"""
        pass

    def deserialize_from_file(self):
        """Deserializes a file into an object"""
        pass
