#######################################################
# 
# persistence_facade.py
# Python implementation of the Interface PersistenceFacade
# Generated by Enterprise Architect
# Created on:      29-Aug-2022 10:46:41 AM
# Original author: ingo herwig <ingo@wemove.com>
# 
#######################################################
from typing import Any
from digitalpy.core.domain.object_id import ObjectId
from digitalpy.core.persistence.persistence_mapper import PersistenceMapper
from abc import ABC, abstractmethod
from digitalpy.core.persistence.build_depth import BuildDepth
from digitalpy.core.persistence.paging_info import PagingInfo



class PersistenceFacade(ABC):
    """PersistenceFacade defines the interface for PersistenceFacade implementations.
    """
    
    @abstractmethod
    def create(self, type: Any, build_depth: Any = BuildDepth.SINGLE) -> Any:
        """_construct the template of an object of a given type. _the object will be
        attached to the transaction, if the transaction is active.
            @note _if an object required to be transient, the I_persistent_mapper.create()
        method or the class constructor must be used.
            @param $type _the type of object to build (either fully qualified or simple,
        if not ambiguous)
            @param $build_depth _one of the BUILDDEPTH constants or a number describing
        the number of generations to build (except BuildDepth.INFINITE, BuildDepth.
        PROXIES_ONLY) (default: _BuildDepth.SINGLE_)
            @return _persistent_object
        """
    
    @abstractmethod
    def get_first_OID(self, type: Any, criteria: Any = None, orderby: Any = None, paging_info : PagingInfo = None) -> Any:
        """_get the first object id of objects matching a given condition. _if a PagingInfo
        instance is ed it will be used and updated.
            @param $type _the type of the object (either fully qualified or simple, if
        not ambiguous)
            @param $criteria _an array of _criteria instances that define conditions on
        the type's attributes (optional, default: _None_)
            @param $orderby _an array holding names of attributes to order by, maybe
        appended with 'ASC', 'DESC' (optional, default: _None_)
            @param $paging_info A reference PagingInfo instance. (default: _None_)
            @return _object_id or None
        """
      
    @abstractmethod
    def get_fully_qualified_type(self, type: Any) -> Any:
        """_get the fully qualified type name for a given simple type name.
            @param $type _type name without namespace
            @return _fully qualified type name (with namespace)
        """
        
    @abstractmethod
    def get_known_types(self) -> Any:
        """_get a list of types defined in the application.
            @return _the list of fully qualified type names
        """
        
    @abstractmethod
    def get_last_created_OID(self, type: Any) -> Any:
        """_get the object id of the last created object of a given type.
            @param $type _the type of the object (either fully qualified or simple, if
        not ambiguous)
            @return _object_id or None
        """
        
    @abstractmethod
    def get_mapper(self, type: Any) -> Any:
        """_get the _persistence_mapper for a given type. _if no mapper for this type is
        defined the mapper for type '*' will be returned
            @param $type _the type of the object to get the _persistence_mapper for (either
        fully qualified or simple, if not ambiguous)
            @return _persistence_mapper or None on error
        """
        
    @abstractmethod
    def get_OIDs(self, type: Any, criteria: Any = None, orderby: Any = None, paging_info : PagingInfo = None) -> Any:
        """_get the object ids of objects matching a given criteria. _if a PagingInfo
        instance is ed it will be used and updated.
            @param $type _the type of the object (either fully qualified or simple, if
        not ambiguous)
            @param $criteria _an array of _criteria instances that define conditions on
        the type's attributes (optional, default: _None_)
            @param $orderby _an array holding names of attributes to order by, maybe
        appended with 'ASC', 'DESC' (optional, default: _None_)
            @param $paging_info A reference PagingInfo instance. (default: _None_)
            @return _array containing the _object_id instances
        """
        
    @abstractmethod
    def get_simple_type(self, type: Any) -> Any:
        """_get the simple type name for a given fully qualified type name.
            @param $type _type name with namespace
            @return _simple type name (without namespace)
        """
        
    @abstractmethod
    def get_transaction(self) -> Any:
        """_get the current business transaction.
            @note _there is only one transaction instance at the same time.
            @return _transaction
        """
        
    @abstractmethod
    def is_known_type(self, type: Any) -> Any:
        """_check if a type is defined in the application.
            @param $type _the type to check (either fully qualified or simple, if not
        ambiguous)
            @return _boolean whether the type is defined or not
        """
        
    @abstractmethod
    def load(self, oid: ObjectId, build_depth: Any = BuildDepth.SINGLE) -> Any:
        """_load an object from the storage. _the object will be attached to the transaction,
        if the transaction is active.
            @note _the parameter build_depth is used to improve fetching from the storage,
        but objects returned by this method are not guaranteed to only contain the
        parameter values. _this is especially true, if the same object was loaded before
        with a wider fetch definition (e.g. greater build_deph value)
            @param $oid _the object id of the object to construct
            @param $build_depth _one of the BUILDDEPTH constants or a number describing
        the number of generations to build (except BuildDepth.REQUIRED, BuildDepth.
        PROXIES_ONLY) (default: _BuildDepth.SINGLE_)
            @return _persistent_object, None if oid does not exist or a given condition
        prevents loading.
        """
        
    @abstractmethod
    def load_first_object(self, type_or_types: Any, build_depth: Any = BuildDepth.SINGLE, criteria: Any = None, orderby: Any = None, paging_info : PagingInfo = None) -> Any:
        """_load the first object matching a given condition. _if a PagingInfo instance is
        ed it will be used and updated.
            @param $type_or_types _the type or types array of objects (either fully
        qualified or simple, if not ambiguous)
            @param $build_depth _one of the BUILDDEPTH constants or a number describing
        the number of generations to build (except BuildDepth.REQUIRED, BuildDepth.
        PROXIES_ONLY) (default: BuildDepth.SINGLE)
            @param $criteria _an array of _criteria instances that define conditions on
        the type's attributes (optional, default: _None_)
            @param $orderby _an array holding names of attributes to order by, maybe
        appended with 'ASC', 'DESC' (optional, default: _None_)
            @param $paging_info A reference PagingInfo instance (default: _None_)
            @return _persistent_object or None
        """
        
    @abstractmethod
    def load_objects(self, type_or_types: Any, build_depth: Any = BuildDepth.SINGLE, criteria: Any = None, orderby: Any = None, paging_info : PagingInfo = None) -> Any:
        """_load the objects matching a given condition. _if a PagingInfo instance is ed
        it will be used and updated.
            @param $type_or_types _the type or types array of objects (either fully
        qualified or simple, if not ambiguous)
            @param $build_depth _one of the BUILDDEPTH constants or a number describing
        the number of generations to build (except BuildDepth.REQUIRED, BuildDepth.
        PROXIES_ONLY) (default: BuildDepth.SINGLE)
            @param $criteria _an array of _criteria instances that define conditions on
        the object's attributes (optional, default: _None_)
            @param $orderby _an array holding names of attributes to order by, maybe
        appended with 'ASC', 'DESC' (optional, default: _None_)
            @param $paging_info A reference PagingInfo instance (optional, default:
        _None_)
            @return _array containing the _persistent_object instances
        """
        
    @abstractmethod
    def set_mapper(self, type: Any, mapper: PersistenceMapper) -> Any:
        """_explicitly set a _persistent_mapper for a type
            @param $type _the type to set the mapper for (fully qualified)
            @param $mapper _persistence_mapper instance
        """
        