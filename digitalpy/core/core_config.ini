; the exporter mechanism for the metrics controller
[MetricsExporter]
__class = opentelemetry.sdk.metrics.export.ConsoleMetricExporter

[TracingProvider]
__class = digitalpy.core.telemetry.impl.opentel_tracing_provider.OpenTelTracingProvider

[MetricsProvider]
__class = digitalpy.core.telemetry.impl.opentel_metrics_provider.OpenTelMetricsProvider

[Formatter]
__class = digitalpy.core.parsing.impl.default_formatter.DefaultFormatter

[Formats]
pickled = $pickledFormat

[PickledFormat]
__class = digitalpy.core.parsing.impl.pickled_format.PickledFormat

[Request]
__class = digitalpy.core.zmanager.impl.default_request.DefaultRequest

[ActionKeyController]
__class = digitalpy.core.digipy_configuration.action_key_controller.ActionKeyController

[Files]
__class = digitalpy.core.files.files_facade.Files

[ActionMapper]
; this is the default action mapper
__class = digitalpy.core.zmanager.impl.async_action_mapper.AsyncActionMapper
routing_subscriber_address = tcp://127.0.0.1:19030
routing_publisher_address = tcp://127.0.0.1:19031

[AsyncActionMapper]
; this is a static reference to the async action mapper and should not be changed
__class = digitalpy.core.zmanager.impl.async_action_mapper.AsyncActionMapper
routing_subscriber_address = tcp://127.0.0.1:19030
routing_publisher_address = tcp://127.0.0.1:19031

[SyncActionMapper]
; this is a static reference to the sync action mapper and should not be changed
__class = digitalpy.core.zmanager.impl.default_action_mapper.DefaultActionMapper

[event_manager]
__class = digitalpy.core.main.impl.default_event_manager.DefaultEventManager

[Response]
__class = digitalpy.core.zmanager.impl.default_response.DefaultResponse

[ObjectId]
__class = digitalpy.core.domain.object_id.ObjectId

[PersistenceFacade]
__class = digitalpy.core.persistence.impl.default_persistence_facade.DefaultPersistenceFacade
log_strategy = DefaultFileLogger

[DefaultFileLogger]
__class = digitalpy.core.impl.default_file_logger.DefaultFileLogger

; the subject configuration
[Subject]
__class = digitalpy.core.zmanager.subject.Subject
subject_address = tcp://127.0.0.1:19030
frontend_pub_address = tcp://127.0.0.1:19031
backend_address = tcp://127.0.0.1:19031
worker_count = 3

; the subject pusher configuration responsible for pushing messages to the subject
[SubjectPusher]
__class = digitalpy.core.zmanager.impl.subject_pusher.SubjectPusher

; the integration manager configuration
[IntegrationManager]
__class = digitalpy.core.zmanager.integration_manager.IntegrationManager
integration_manager_puller_protocol = tcp
integration_manager_puller_address = 127.0.0.1
integration_manager_puller_port = 19033
integration_manager_publisher_protocol = tcp
integration_manager_publisher_address = 127.0.0.1
integration_manager_publisher_port = 19034

[IntegrationManagerSubscriber]
__class = digitalpy.core.zmanager.impl.integration_manager_subscriber.IntegrationManagerSubscriber
; amount of time to wait for a response from the integration manager, if 0 then it will wait indefinitely, if -1 then it will not wait
timeout = 3000

; the routing worker configuration
[RoutingWorker]
__class = digitalpy.core.zmanager.impl.default_routing_worker.DefaultRoutingWorker
subject_address = tcp://127.0.0.1:19031
integration_manager_address = tcp://127.0.0.1:19033
integration_manager_pub_address = tcp://127.0.0.1:19034

; the service manager configuration
[ServiceManager]
__class = digitalpy.core.service_management.service_management_core.ServiceManagementCore
subject_address = 127.0.0.1
subject_port = 19030
subject_protocol = tcp
integration_manager_address = 127.0.0.1
integration_manager_port = 19034
integration_manager_protocol = tcp
service_id = service_manager

[DigitalPy]
service_id = digitalpy

; the core api configuration
[digitalpy.core_api]
__class = digitalpy.core.api.api_service.ApiService
configuration = digitalpy.core_api.configuration

; the service configuration values
[Service]
subject_address = 127.0.0.1
subject_port = 19030
subject_protocol = tcp
integration_manager_address = 127.0.0.1
integration_manager_port = 19034
integration_manager_protocol = tcp

; the service manager process controller class
[ServiceManagerProcessController]
__class = digitalpy.core.service_management.controllers.service_management_process_controller.ServiceManagementProcessController

; the default tcp_network
[TCPNetwork]
__class = digitalpy.core.network.impl.network_tcp.TCPNetwork
client = DefaultClient

; the default http_network
[FlaskHTTPNetwork]
__class = digitalpy.core.network.impl.network_flask_http.FlaskHTTPNetwork
client = DefaultClient

; the flask http network using blueprints
[FlaskHTTPNetworkBlueprints]
__class = digitalpy.core.network.impl.network_flask_http_blueprints.FlaskHTTPNetworkBlueprints
client = DefaultClient

[DefaultClient]
__class = digitalpy.core.domain.domain.network_client.NetworkClient

; the default tracer exporter
[TracerExporter]
__class = opentelemetry.sdk.trace.export.ConsoleSpanExporter
;__class = FreeTAKServer.components.core.abstract_component.telemetry_exporter.ZMQExporter
;host = 127.0.0.1
;port = 40033

; the processor mechanism for the tracer controller
[TracerProcessor]
__class = opentelemetry.sdk.trace.export.BatchSpanProcessor

; the exporter mechanism for the tracer controller
[TracingProvider]
__class = digitalpy.core.telemetry.impl.opentel_tracing_provider.OpenTelTracingProvider

; COMPONENTS
; include all the core components

[ComponentManagement]
__class = digitalpy.core.component_management.component_management_facade.ComponentManagement

[Domain]
__class = digitalpy.core.domain.domain_facade.Domain

[IAM]
__class = digitalpy.core.IAM.IAM_facade.IAM

[Serialization]
__class = digitalpy.core.serialization.serialization_facade.Serialization

[ServiceManagement]
__class = digitalpy.core.service_management.service_management_facade.ServiceManagement
