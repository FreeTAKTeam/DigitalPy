#######################################################
# 
# paging_info.py
# Python implementation of the Class PagingInfo
# Generated by Enterprise Architect
# Created on:      29-Aug-2022 11:01:06 AM
# Original author: ingo herwig <ingo@wemove.com>
# 
#######################################################


from typing import Any
import math
import sys

class PagingInfo:
    """PagingInfo contains information about a paged list.
    """
    __ignoreTotalCount = False
    __offset = 0
    __page = 1
    __pageSize = 10
    SIZE_INFINITE = -1
    __totalCount = 0
    
    def __init__(self, page_size : Any, ignore_total_count : Any = False) -> Any:
        """Creates a PagingInfo object. The ignoreTotalCount parameter may be set to true,
        if the count is to be ignored. This may speed up loading of objects, because an
        extra count query may be omitted.
           @param $pageSize The pageSize (PagingInfo::SIZE_INFINITE to set no page
        size)
           @param $ignoreTotalCount Boolean whether this instance ignores the total
        count or not (optional, default: _False_)
        """
        self.page_size = int(page_size)
        if self.page_size == self.SIZE_INFINITE :
            self.page_size = sys.maxsize
        
        self.ignore_total_count = ignore_total_count

    def get_offset(self) -> Any:
        """_get the current offset.
           @return _number
        """
        return self.offset

    def get_page(self) -> Any:
        """_get the current page (1-based).
           @return _number
        """
        return self.page

    def get_page_count(self) -> Any:
        """_get the number of pages.
           @return _number
        """
        return math.ceil(self.total_count / self.page_size)

    def get_page_size(self) -> Any:
        """_get the size of a pages.
           @return _number
        """
        return self.page_size

    def get_pagination(self, url_pattern : str, max_display_pages : Any = 10) -> Any:
        """_get the pages for a pagination navigation
           @param $url_pattern _url string to use containing literal {page}, that will be
        replaced
           @param $max_display_pages _maximum number of pages to display (optional,
        default: 10)
           @return _array with keys 'first', 'last', 'current', 'prev', 'next', 'pages'
        and arrays with 'url', 'num' as values or null, if page count <= 1
        """
        if self.get_page_count() <= 1 :
            return None
        

        # calculate pages
        get_page = lambda val: {'num': val, 'url': url_pattern.replace(':page', val, )}

        first = 1
        last = self.get_page_count()
        page = self.get_page()

        half_range = math.floor(max_display_pages/2)
        start_page = (lambda : first if page < half_range else max([page-half_range, first]))()
        end_page = max_display_pages-1 + start_page
        end_page = (lambda : last if last < end_page else end_page)()
        diff = start_page - end_page + max_display_pages-1
        start_page -= (lambda : diff if (start_page - diff > 0) else 0)()

        pages = map(get_page, range(start_page, end_page))

        return {
                'first': get_page(first),
                'last': get_page(last),
                'current': get_page(page),
                'prev': (lambda : get_page(page-1) if page > start_page else None)(),
                'next': (lambda : get_page(page+1) if page < end_page else None),
                'pages': pages,
        }

    def get_total_count(self) -> Any:
        """_get the number of list items.
           @return _number
        """
        return self.total_count

    def is_ignoring_total_count(self) -> Any:
        """_check if this instance iignores the total count.
           @return _boolean
        """
        return self.ignore_total_count

    def is_on_first_page(self) -> Any:
        """_determine if we are on the first page.
           @return _boolean
        """
        return self.page == 1

    def is_on_last_page(self) -> Any:
        """_determine if we are on the first page.
           @return _boolean
        """
        return self.page == self.get_page_count()

    def set_offset(self, offset : Any) -> Any:
        """_set the current offset (also selects the page).
           @param $offset _the current list offset.
        """
        self.offset = offset
        self.page = math.ceil(int(offset)/self.page_size)+1

    def set_page(self, page : Any) -> Any:
        """_set the current page (1-based) (also sets the offset).
           @param $page _the current page.
        """
        self.page = int(page)
        self.offset = (page - 1) * self.page_size

    def set_total_count(self, total_count : Any) -> Any:
        """_set the number of list items.
           @param $total_count _the number of list items.
        """
        self.total_count = int(total_count)