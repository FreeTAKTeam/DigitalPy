; This is a template application configuration file for a DigitalPy application.
; The application configuration will configure object in the SingletonConfigurationFactory.
; These objects will store configuration data and can be used by the application.
; Some configuration objects are used to configure components, and others are used to configure services.
; Below is an example of a service configuration for a simple TCP service.
; [dp_application.simple_tcp]
; __class = digitalpy.core.service_management.domain.model.service_configuration.ServiceConfiguration
; status = STOPPED
; name = SimpleTCPService
; port = 8443
; host = 0.0.0.0
; protocol = TCPNetwork

; The application configuration file must be updated to include the service configuration of any new services.
; For example, the following configuration will add a new service configuration for a simple TCP service.
; [ServiceManagementConfiguration]
; __class = digitalpy.core.service_management.domain.model.service_management_configuration.ServiceManagementConfiguration
; services = [dp_helloworld.simple_tcp]

; The digitalpy.core_api configuration is used to configure the core API. The core API is the default API exposed by the DigitalPy application.
; The commented out configuration below is the default configuration for the core API. Flows can be added to the core API to expose new functionality.
[digitalpy.core_api]
;port = 8080
;host = 0.0.0.0
flows = [
; FilmologyManagement component flows
FilmologyManagement__POSTMovie
,FilmologyManagement__DELETEMovie
,FilmologyManagement__GETMovie
,FilmologyManagement__PATCHMovie
,FilmologyManagement__GETDirectorId
,FilmologyManagement__POSTPoster
,FilmologyManagement__DELETEPoster
,FilmologyManagement__GETPoster
,FilmologyManagement__PATCHPoster
,FilmologyManagement__GETGenreId
,FilmologyManagement__POSTDate
,FilmologyManagement__DELETEDate
,FilmologyManagement__GETDate
,FilmologyManagement__PATCHDate
,FilmologyManagement__GETLanguageId
,FilmologyManagement__POSTDirector
,FilmologyManagement__DELETEDirector
,FilmologyManagement__GETDirector
,FilmologyManagement__PATCHDirector
,FilmologyManagement__GETDateId
,FilmologyManagement__POSTActor
,FilmologyManagement__DELETEActor
,FilmologyManagement__GETActor
,FilmologyManagement__PATCHActor
,FilmologyManagement__GETMovieId
,FilmologyManagement__POSTLanguage
,FilmologyManagement__DELETELanguage
,FilmologyManagement__GETLanguage
,FilmologyManagement__PATCHLanguage
,FilmologyManagement__GETPosterId
,FilmologyManagement__GETActorId
,FilmologyManagement__POSTGenre
,FilmologyManagement__DELETEGenre
,FilmologyManagement__GETGenre
,FilmologyManagement__PATCHGenre
]

; The component management configuration is used to configure the component management componet.
; You'll probably want to update the component_import_root property to point to the python import path for
; your components folder.
[ComponentManagementConfiguration]
component_import_root = filmology_app.components